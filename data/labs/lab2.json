{
  "id": "lab2",
  "title": "Lab 2: AI Lifecycle & MLOps Integration",
  "description": "Build a Flask MLOps service to track AI performance, integrate Prometheus for metrics monitoring, and implement comprehensive metrics collection for your AI receptionist.",
  "duration": "3-4 hours",
  "level": "Intermediate",
  "technology": "Flask + Prometheus",
  "sections": [
    {
      "id": "prerequisites",
      "title": "Prerequisites & Database Setup",
      "content": "# Lab 2: AI Lifecycle & MLOps Integration\n\n**Time Required:** 3-4 hours  \n**What You'll Do:** Build a Flask MLOps service to track AI performance, integrate Prometheus for metrics monitoring, and implement comprehensive metrics collection for your AI receptionist\n\n**Lab Collaborators:**\n- Edward Lampoh - Software Developer & Collaborator\n- Oluwafemi Adebayo, PhD - Academic Professor & Collaborator\n\n## Prerequisites from Lab 1\n\n**Before starting Lab 2, ensure you completed Lab 1 and have:**\n\n- Working Next.js app running at http://localhost:3000\n- Environment file (.env) with these keys configured:\n  ```env\n  DATABASE_URL=\"your_neon_connection_string\"\n  GOOGLE_GENERATIVE_AI_API_KEY=\"your_gemini_api_key\"\n  ```\n- Neon database connected and working (test by creating a business in the app)\n- Chat functionality working (you can ask questions and get AI responses)\n- Appointment booking working (AI can transition to booking mode)\n\n**Quick Test:**\n\n1. Go to http://localhost:3000\n2. Create a test business\n3. Chat with the AI and try booking an appointment\n4. If this works, you're ready for Lab 2!\n\n## Complete Database Setup\n\n**If you haven't set up Neon database yet, follow these steps:**\n\n### Step 1: Create Neon Database (If Not Done)\n\n1. **Go to [neon.tech](https://neon.tech)** and sign up for free\n2. **Create a new project** called \"ai-appointment-setter\"\n3. **Copy your connection string** from the dashboard\n4. **Add to your `.env` file:**\n   ```env\n   DATABASE_URL=\"postgresql://username:password@host/database?sslmode=require\"\n   ```\n\n### Step 2: Create Required Tables\n\n**You need BOTH tables for Lab 2 to work:**\n\n#### Option A: Use the SQL files (Recommended)\n```bash\n# Check if you have the SQL files\nls scripts/\n# You should see: create-tables.sql and create-metrics-table.sql\n\n# View the main tables SQL\ncat scripts/create-tables.sql\n\n# View the metrics table SQL  \ncat scripts/create-metrics-table.sql\n```\n\n#### Option B: Copy-paste this SQL\n\n**Go to your Neon database console and run BOTH scripts:**\n\n**First, create the main tables (if not done in Lab 1):**\n```sql\n-- Main application tables (from Lab 1) - Copy from scripts/create-tables.sql\n-- This creates: businesses, documents, conversations, messages, appointments, business_settings\n-- Run the entire contents of scripts/create-tables.sql in your Neon console\n```\n\n**Then, create the metrics table for Lab 2:**\n\n```sql\n-- Create AI Metrics table for MLOps tracking\nCREATE TABLE IF NOT EXISTS ai_metrics (\n    id SERIAL PRIMARY KEY,\n    business_id VARCHAR(255) NOT NULL,\n    conversation_id VARCHAR(255),\n    session_id VARCHAR(255) NOT NULL,\n    \n    -- Performance metrics\n    response_time_ms INTEGER NOT NULL,\n    success_rate DECIMAL(5,4) NOT NULL,\n    \n    -- AI performance metrics\n    tokens_used INTEGER NOT NULL,\n    prompt_tokens INTEGER,\n    completion_tokens INTEGER,\n    api_cost_usd DECIMAL(10,6) NOT NULL,\n    model_name VARCHAR(100) NOT NULL,\n    \n    -- Business metrics\n    intent_detected VARCHAR(50) NOT NULL,\n    appointment_requested BOOLEAN DEFAULT FALSE,\n    human_handoff_requested BOOLEAN DEFAULT FALSE,\n    appointment_booked BOOLEAN DEFAULT FALSE,\n    \n    -- Message metrics\n    user_message_length INTEGER NOT NULL,\n    ai_response_length INTEGER NOT NULL,\n    response_type VARCHAR(50) NOT NULL,\n    \n    -- Timestamp\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create indexes for performance\nCREATE INDEX IF NOT EXISTS idx_ai_metrics_business_id ON ai_metrics(business_id);\nCREATE INDEX IF NOT EXISTS idx_ai_metrics_created_at ON ai_metrics(created_at);\n```\n\n### Step 3: Verify Database Setup\n\n**Test your database connection:**\n\n```sql\n-- Check if all tables exist\nSELECT table_name FROM information_schema.tables \nWHERE table_schema = 'public' \nORDER BY table_name;\n\n-- You should see: appointments, ai_metrics, businesses\n```\n\n**Test inserting data:**\n```sql\n-- Test businesses table\nINSERT INTO businesses (name, industry, description) \nVALUES ('Test Business', 'Healthcare', 'Test description');\n\n-- Check it worked\nSELECT * FROM businesses WHERE name = 'Test Business';\n\n-- Test ai_metrics table structure\nSELECT column_name, data_type FROM information_schema.columns \nWHERE table_name = 'ai_metrics' \nORDER BY ordinal_position;\n```\n\n**Success indicators:**\n- All 3 tables exist (businesses, appointments, ai_metrics)\n- You can insert and select from businesses table\n- ai_metrics table has all required columns\n\n**Still having issues?** \n- Check your DATABASE_URL format includes `?sslmode=require`\n- Ensure you're using the correct database name from Neon\n- Try refreshing your Neon console and running SQL again\n\n### Step 4: Environment Configuration Check\n\n**Ensure your main `.env` file has:**\n```env\n# Required for Lab 2\nDATABASE_URL=\"postgresql://username:password@host/database?sslmode=require\"\nGOOGLE_GENERATIVE_AI_API_KEY=\"your_gemini_api_key\"\n\n# Optional but recommended\nNEXTAUTH_SECRET=\"your_secret_here\"\nNEXTAUTH_URL=\"http://localhost:3000\"\n```\n\n**Test your Next.js app works:**\n```bash\n# Start your Next.js app\nnpm run dev\n\n# Go to http://localhost:3000\n# Create a test business\n# Try chatting with the AI\n# Try booking an appointment\n```\n\n### Pre-Lab 2 Checklist\n\n**Before starting Part A, verify you have:**\n\n- Neon database created and accessible\n- All tables created (businesses, appointments, ai_metrics, etc.)\n- DATABASE_URL in your `.env` file working\n- Next.js app running at http://localhost:3000\n- AI chat responding to messages\n- Appointment booking working in the chat\n\n**Quick test command:**\n```bash\n# Test your complete database setup\nnode scripts/test-database-connection.js\n```\n\n**This test will verify:**\n- Database connection works\n- All required tables exist\n- ai_metrics table has correct structure\n- You can insert and read data\n\n**All checked?** → Start Part A\n**Issues?** → Fix the failing items above first"
    },
    {
      "id": "flask-service",
      "title": "Part A: Build Flask MLOps Service",
      "content": "# Part A: Build Flask MLOps Service\n\n*You'll create a separate Python service that tracks how well your AI is performing*\n\n## 1. Create Project Structure\n\n**Create the MLOps service folder:**\n\n**Windows:**\n```cmd\n# In your project root directory\nmkdir mlops-service\ncd mlops-service\n```\n\n**Mac/Linux:**\n```bash\n# In your project root directory\nmkdir mlops-service\ncd mlops-service\n```\n\n**Create the basic file structure:**\n\n**Windows:**\n```cmd\n# Create these files (we'll fill them in step by step)\necho. > app.py\necho. > requirements.txt\necho. > .env\necho. > start.bat\n```\n\n**Mac/Linux:**\n```bash\n# Create these files (we'll fill them in step by step)\ntouch app.py\ntouch requirements.txt\ntouch .env\ntouch start.sh\n```\n\n**Your folder should now look like:**\n```\nmlops-service/\n├── app.py          # Main Flask application\n├── requirements.txt # Python dependencies\n├── .env            # Environment variables\n└── start.sh        # Startup script\n```\n\n## 2. Set Up Python Dependencies\n\n**Create `requirements.txt`:**\n\n```txt\n# Flask MLOps Service Dependencies\n# Core Flask dependencies\nFlask==3.0.0\nFlask-CORS==4.0.0\n\n# Prometheus for metrics monitoring\nprometheus-client==0.19.0\n\n# Database connectivity\npsycopg2-binary==2.9.9\n\n# Additional utilities\npython-dotenv==1.0.0\nrequests==2.31.0\n```\n\n**Create Python virtual environment:**\n\n**Windows:**\n```cmd\n# Create virtual environment\npython -m venv venv\n\n# Activate it\nvenv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n```\n\n**Mac/Linux:**\n```bash\n# Create virtual environment\npython3 -m venv venv\n\n# Activate it\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n```\n\n**Success Check:** Run `pip list` - you should see Flask, prometheus-client, and other packages installed.\n\n## 3. Configure Environment Variables\n\n**Create `.env` file:**\n\n```env\n# Database Configuration (same as your Next.js app)\nDATABASE_URL=your_neon_database_url_here\n\n# Flask Configuration\nFLASK_ENV=development\nFLASK_DEBUG=True\n\n# Service Configuration\nENVIRONMENT=development\nSERVICE_PORT=5001\nPROMETHEUS_PORT=8001\n```\n\n**Important Steps:**\n\n1. **Copy your DATABASE_URL** from your main project `.env` file\n2. **Use the EXACT same connection string** - this connects to the same Neon database\n3. **Keep the quotes** around the DATABASE_URL value\n\n**How to Copy:**\n```bash\n# In your main project directory, show your DATABASE_URL\ncat .env | grep DATABASE_URL\n\n# Copy that exact line to mlops-service/.env\n```\n\n## 4. Build the Flask Application\n\n**Create `app.py` - Start with imports and setup:**\n\n```python\n\"\"\"\nFlask MLOps Service for AI Appointment Setter\nThis service tracks AI performance metrics and stores them for analysis\n\"\"\"\n\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom prometheus_client import Counter, Histogram, Gauge, generate_latest, CONTENT_TYPE_LATEST\nimport os\nimport json\nimport time\nfrom datetime import datetime\nimport logging\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\n\n# Configure logging so we can see what's happening\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Initialize Flask app\napp = Flask(__name__)\nCORS(app)  # Allow requests from Next.js app\n\n# Database connection\nDATABASE_URL = os.getenv('DATABASE_URL')\n```\n\n**Add database functions:**\n\n```python\ndef fetch_metrics_from_db() -> bool:\n    \"\"\"\n    Fetch metrics directly from Neon database using HTTP API\n    This avoids psycopg2 dependency while accessing the database directly\n    \"\"\"\n    try:\n        if not DATABASE_URL:\n            logger.warning(\"DATABASE_URL not configured, skipping metrics fetch\")\n            return False\n        \n        logger.info(\"Fetching historical metrics directly from Neon database...\")\n        \n        # For Lab 2, we'll start with fresh metrics and implement full DB fetch in later labs\n        # This ensures the service works immediately without complex DB setup\n        logger.info(\"Starting with fresh Prometheus metrics (full DB integration in later labs)\")\n        return True\n        \n    except Exception as e:\n        logger.error(f\"Error fetching metrics from database: {e}\")\n        return False\n\ndef store_metrics_in_db(metrics_data):\n    \"\"\"\n    Store metrics (handled by Next.js side to avoid psycopg2 installation issues)\n    \n    Args:\n        metrics_data: Dictionary containing all metrics\n        \n    Returns:\n        True (Next.js handles database storage)\n    \"\"\"\n    try:\n        # Log the metrics data for debugging\n        logger.info(f\"Processed metrics for business {metrics_data.get('business_id')}\")\n        \n        # Database storage is handled by Next.js side\n        # Next.js already stores the metrics when trackMetrics() is called\n        return True\n    except Exception as e:\n        logger.error(f\"Error processing metrics: {e}\")\n        return False\n```\n\n**Add your first endpoint - health check:**\n\n```python\n@app.route('/health', methods=['GET'])\ndef health_check():\n    \"\"\"Check if our service is running properly\"\"\"\n    return jsonify({\n        'status': 'healthy',\n        'service': 'mlops-service',\n        'timestamp': datetime.utcnow().isoformat(),\n        'monitoring': 'prometheus'\n    })\n```\n\n**Add the main metrics tracking endpoint:**\n\n```python\n@app.route('/track', methods=['POST'])\ndef track_metrics():\n    \"\"\"Receive metrics from the Next.js chat application\"\"\"\n    try:\n        # Get the metrics data sent from Next.js\n        metrics_data = request.get_json()\n\n        if not metrics_data:\n            return jsonify({'error': 'No metrics data provided'}), 400\n\n        # Make sure we have the essential data\n        required_fields = ['business_id', 'response_time_ms', 'tokens_used']\n        for field in required_fields:\n            if field not in metrics_data:\n                return jsonify({'error': f'Missing required field: {field}'}), 400\n\n        # Store metrics in database\n        success = store_metrics_in_db(metrics_data)\n\n        if success:\n            logger.info(f\"Successfully tracked metrics for business {metrics_data.get('business_id')}\")\n            return jsonify({\n                'status': 'success',\n                'message': 'Metrics tracked successfully',\n                'timestamp': datetime.utcnow().isoformat()\n            })\n        else:\n            return jsonify({'error': 'Failed to store metrics'}), 500\n\n    except Exception as e:\n        logger.error(f\"Error tracking metrics: {e}\")\n        return jsonify({'error': 'Internal server error'}), 500\n```\n\n**Add the Flask app runner:**\n\n```python\nif __name__ == '__main__':\n    # Run the Flask app\n    app.run(host='0.0.0.0', port=5001, debug=True)\n```\n\n## 5. Create Startup Script\n\n**Create `start.sh`:**\n\n```bash\n#!/bin/bash\n\necho \"🚀 Starting MLOps Service for AI Appointment Setter\"\necho \"==================================================\"\n\n# Check if Python is installed\nif ! command -v python3 &> /dev/null; then\n    echo \"❌ Python 3 is not installed. Please install Python 3.8 or higher.\"\n    exit 1\nfi\n\n# Create virtual environment if it doesn't exist\nif [ ! -d \"venv\" ]; then\n    echo \"📦 Creating Python virtual environment...\"\n    python3 -m venv venv\nfi\n\n# Activate virtual environment\necho \"🔧 Activating virtual environment...\"\nsource venv/bin/activate\n\n# Install dependencies\necho \"📚 Installing Python dependencies...\"\npip install -r requirements.txt\n\n# Create metrics directory for Prometheus\nmkdir -p metrics\n\necho \"✅ Setup complete!\"\necho \"🌐 Service will be available at: http://localhost:5001\"\necho \"Starting Flask application...\"\n\n# Start Flask application\npython app.py\n```\n\n**Make it executable:**\n```bash\nchmod +x start.sh\n```\n\n## 6. Test Your Flask Service\n\n**Start the service:**\n\n**Windows:**\n```cmd\nstart.bat\n```\n\n**Mac/Linux:**\n```bash\n./start.sh\n```\n\n**Test the health endpoint:**\n```bash\n# In a new terminal\ncurl http://localhost:5001/health\n```\n\n**You should see:**\n```json\n{\n  \"status\": \"healthy\",\n  \"service\": \"mlops-service\",\n  \"timestamp\": \"2024-01-15T10:30:00.000000\",\n  \"monitoring\": \"prometheus\"\n}\n```\n\n**Success Check:** If you see the healthy response, your Flask service is working!\n\n### Part A Completion Check\n\n**Before proceeding to Part B, ensure you have:**\n\n- Flask service folder created with all files\n- Python virtual environment set up\n- Dependencies installed successfully\n- Environment variables configured\n- Flask app runs without errors\n- Health endpoint returns successful response\n- Database table created (check logs for \"Metrics table created successfully\")\n\n**Have all 7 items checked?** → Proceed to Part B\n**Missing something?** → Complete the missing steps above"
    }
  ]
}